#!/usr/bin/env python3
"""
Resumen del Sistema de Normalizaci√≥n
====================================

Script que genera un resumen completo de todos los componentes normalizados
y las capacidades del sistema.
"""

import json
from pathlib import Path


def load_all_normalized_data():
    """Carga todos los datasets normalizados"""
    base_path = Path(__file__).parent.parent / 'normalized_data'
    
    datasets = {}
    
    # Intentar cargar cada dataset
    dataset_files = {
        'cases': 'CaseData_normalized.json',
        'coolers': 'CPUCoolerData_normalized.json',
        'cpus': 'CPUData_normalized.json',
        'gpus': 'GPUData_normalized.json'
    }
    
    for name, filename in dataset_files.items():
        file_path = base_path / filename
        if file_path.exists():
            with open(file_path, 'r', encoding='utf-8') as f:
                datasets[name] = json.load(f)
            print(f"‚úÖ {name.upper()}: {len(datasets[name])} registros cargados")
        else:
            print(f"‚ùå {name.upper()}: Archivo no encontrado")
    
    return datasets


def demonstrate_cross_component_analysis(datasets):
    """Demuestra an√°lisis cruzado entre componentes"""
    print(f"\nüîó An√°lisis Cruzado de Componentes")
    print("=" * 35)
    
    if 'cases' not in datasets or 'coolers' not in datasets:
        print("‚ùå Datos insuficientes para an√°lisis cruzado")
        return
    
    cases = datasets['cases']
    coolers = datasets['coolers']
    
    # Ejemplo: Encontrar coolers compatibles con el primer gabinete
    sample_case = cases[0]
    case_cooler_height_limit = sample_case['compatibility']['supported_cpu_cooler_height']['value']
    
    print(f"üì¶ Gabinete ejemplo: {sample_case['name'][:50]}...")
    print(f"   Altura m√°xima cooler: {case_cooler_height_limit} mm")
    
    if case_cooler_height_limit:
        compatible_coolers = []
        for cooler in coolers:
            cooler_height = cooler['specifications']['height']['value']
            if cooler_height and cooler_height <= case_cooler_height_limit:
                compatible_coolers.append({
                    'name': cooler['name'],
                    'height': cooler_height,
                    'tdp': cooler['specifications']['tdp']['value'],
                    'type': cooler['compatibility_analysis']['cooler_type']
                })
        
        print(f"   üå°Ô∏è Coolers compatibles encontrados: {len(compatible_coolers)}")
        
        # Mostrar algunos ejemplos
        if compatible_coolers:
            # Ordenar por TDP descendente
            compatible_coolers.sort(key=lambda x: x['tdp'] or 0, reverse=True)
            print(f"   Top 3 por TDP:")
            for i, cooler in enumerate(compatible_coolers[:3]):
                tdp_str = f"{cooler['tdp']}W" if cooler['tdp'] else "N/A"
                print(f"     {i+1}. {cooler['name'][:30]}... ({tdp_str}, {cooler['height']}mm)")


def demonstrate_mathematical_capabilities(datasets):
    """Demuestra capacidades matem√°ticas con datos normalizados"""
    print(f"\nüßÆ Capacidades Matem√°ticas Avanzadas")
    print("=" * 40)
    
    if 'cases' in datasets:
        cases = datasets['cases']
        
        # Calcular vol√∫menes autom√°ticamente
        volumes = []
        for case in cases:
            dims = case['dimensions']
            if all(d['value'] for d in [dims['width'], dims['depth'], dims['height']]):
                volume = (dims['width']['value'] * dims['depth']['value'] * dims['height']['value']) / 1000000
                volumes.append(volume)
        
        if volumes:
            avg_volume = sum(volumes) / len(volumes)
            min_volume = min(volumes)
            max_volume = max(volumes)
            
            print(f"üì¶ An√°lisis de vol√∫menes de gabinetes:")
            print(f"   Volumen promedio: {avg_volume:.1f}L")
            print(f"   Rango: {min_volume:.1f}L - {max_volume:.1f}L")
            print(f"   Gabinetes analizados: {len(volumes)}")
    
    if 'cpus' in datasets:
        cpus = datasets['cpus']
        
        # Calcular eficiencias autom√°ticamente
        efficiencies = []
        for cpu in cpus:
            efficiency = cpu['calculated_metrics']['efficiency_score']
            if efficiency:
                efficiencies.append(efficiency)
        
        if efficiencies:
            avg_efficiency = sum(efficiencies) / len(efficiencies)
            max_efficiency = max(efficiencies)
            
            print(f"\nüíª An√°lisis de eficiencia de CPUs:")
            print(f"   Eficiencia promedio: {avg_efficiency:.1f} puntos/W")
            print(f"   M√°xima eficiencia: {max_efficiency:.1f} puntos/W")
            print(f"   CPUs analizados: {len(efficiencies)}")
    
    if 'coolers' in datasets:
        coolers = datasets['coolers']
        
        # Calcular factores t√©rmicos
        thermal_factors = []
        for cooler in coolers:
            factor = cooler['compatibility_analysis']['thermal_factor']
            if factor:
                thermal_factors.append(factor)
        
        if thermal_factors:
            avg_thermal = sum(thermal_factors) / len(thermal_factors)
            
            print(f"\nüå°Ô∏è An√°lisis t√©rmico de coolers:")
            print(f"   Factor t√©rmico promedio: {avg_thermal:.1f}")
            print(f"   Coolers analizados: {len(thermal_factors)}")
    
    if 'gpus' in datasets:
        gpus = datasets['gpus']
        
        # Calcular eficiencias de GPU
        gpu_efficiencies = []
        gpu_performance_scores = []
        for gpu in gpus:
            efficiency = gpu['calculated_metrics']['power_efficiency']
            performance = gpu['calculated_metrics']['performance_score']
            if efficiency:
                gpu_efficiencies.append(efficiency)
            if performance:
                gpu_performance_scores.append(performance)
        
        if gpu_efficiencies:
            avg_gpu_efficiency = sum(gpu_efficiencies) / len(gpu_efficiencies)
            max_gpu_performance = max(gpu_performance_scores) if gpu_performance_scores else 0
            
            print(f"\nüéÆ An√°lisis de rendimiento de GPUs:")
            print(f"   Eficiencia energ√©tica promedio: {avg_gpu_efficiency:.1f}")
            print(f"   M√°ximo rendimiento: {max_gpu_performance:.0f}")
            print(f"   GPUs analizadas: {len(gpu_efficiencies)}")


def show_normalization_benefits():
    """Muestra las ventajas de la normalizaci√≥n"""
    print(f"\nüéØ Beneficios de la Normalizaci√≥n")
    print("=" * 35)
    
    benefits = [
        "‚úÖ Separaci√≥n autom√°tica de valores num√©ricos y unidades",
        "‚úÖ C√°lculos matem√°ticos directos (vol√∫menes, eficiencias, ratios)",
        "‚úÖ An√°lisis t√©rmico avanzado (capacidades, matching)",
        "‚úÖ Categorizaci√≥n autom√°tica inteligente",
        "‚úÖ Compatibilidad cruzada entre componentes",
        "‚úÖ M√©tricas calculadas autom√°ticamente",
        "‚úÖ Formato JSON est√°ndar para APIs",
        "‚úÖ Base s√≥lida para machine learning",
        "‚úÖ An√°lisis estad√≠stico habilitado",
        "‚úÖ Optimizaci√≥n de configuraciones"
    ]
    
    for benefit in benefits:
        print(f"  {benefit}")


def show_examples_comparison():
    """Muestra comparaci√≥n antes vs despu√©s"""
    print(f"\nüìä Antes vs Despu√©s de la Normalizaci√≥n")
    print("=" * 45)
    
    print("üî∏ ANTES (datos originales):")
    print("   'AMD Ryzen 5 5600X', '3.7 GHz', '4.6 GHz', '6', '12', '65 W'")
    print("   ‚Ü≥ Datos como strings, an√°lisis manual requerido")
    
    print("\nüî∏ DESPU√âS (datos normalizados):")
    print("   {")
    print('     "name": "AMD Ryzen 5 5600X",')
    print('     "performance": {')
    print('       "base_clock": {"value": 3.7, "unit": "GHz"},')
    print('       "turbo_clock": {"value": 4.6, "unit": "GHz"}')
    print('     },')
    print('     "architecture": {')
    print('       "cores": 6, "threads": 12,')
    print('       "tdp": {"value": 65.0, "unit": "W"}')
    print('     },')
    print('     "calculated_metrics": {')
    print('       "performance_score": 44400.0,')
    print('       "efficiency_score": 683.08,')
    print('       "frequency_boost_ratio": 1.24,')
    print('       "cpu_category": "performance_standard"')
    print('     }')
    print("   }")
    print("   ‚Ü≥ ¬°An√°lisis matem√°tico y categorizaci√≥n autom√°tica!")


def main():
    """Funci√≥n principal del resumen"""
    print("üéØ RESUMEN DEL SISTEMA DE NORMALIZACI√ìN")
    print("=" * 50)
    print("Sistema completo para normalizar datasets de componentes PC")
    print("separando valores num√©ricos de unidades para an√°lisis avanzado.")
    print()
    
    # Cargar todos los datos
    datasets = load_all_normalized_data()
    
    if not datasets:
        print("‚ùå No se encontraron datos normalizados.")
        print("Ejecuta primero: python normalizador_dataset.py")
        return
    
    # Mostrar estad√≠sticas generales
    total_components = sum(len(data) for data in datasets.values())
    print(f"\nüìà Estad√≠sticas Generales:")
    print(f"   Total de componentes normalizados: {total_components}")
    print(f"   Tipos de componentes: {len(datasets)}")
    print(f"   Archivos JSON generados: {len(datasets)}")
    
    # Demostraciones
    demonstrate_cross_component_analysis(datasets)
    demonstrate_mathematical_capabilities(datasets)
    show_examples_comparison()
    show_normalization_benefits()
    
    print(f"\nüöÄ Pr√≥ximos Pasos Sugeridos:")
    print("=" * 30)
    print("  1. Normalizar m√°s componentes (GPU, RAM, Motherboard)")
    print("  2. Crear API REST para consultas normalizadas")
    print("  3. Implementar algoritmos de matching autom√°tico")
    print("  4. Desarrollar dashboard web para visualizaci√≥n")
    print("  5. Aplicar machine learning para predicciones")
    
    print(f"\n‚ú® El sistema est√° listo para an√°lisis avanzados!")
    print("üí° Los datos normalizados transforman strings en conocimiento accionable.")


if __name__ == "__main__":
    main()
